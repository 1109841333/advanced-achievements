package com.hm.achievement;

import java.util.logging.Level;
import java.util.logging.Logger;

import javax.inject.Singleton;

import org.bukkit.Bukkit;
import org.bukkit.plugin.java.JavaPlugin;

import com.hm.achievement.api.AdvancedAchievementsAPI;
import com.hm.achievement.api.AdvancedAchievementsBukkitAPI;
import com.hm.achievement.exception.PluginLoadError;
import com.hm.achievement.lifecycle.PluginLoader;
import com.hm.achievement.module.ConfigModule;
import com.hm.achievement.module.DatabaseModule;
import com.hm.achievement.module.ServerVersionModule;
import com.hm.achievement.module.UpdateCheckerModule;

import dagger.BindsInstance;
import dagger.Component;

/**
 * Advanced Achievements enables unique and challenging achievements on your server. Try to collect as many as you can,
 * earn rewards, climb the rankings and receive RP books!
 * 
 * AdvancedAchievements is under GNU General Public License version 3. Please visit the plugin's GitHub for more
 * information : https://github.com/PyvesB/AdvancedAchievements
 * 
 * Official plugin's server: hellominecraft.fr
 * 
 * Bukkit project page: dev.bukkit.org/bukkit-plugins/advanced-achievements
 * 
 * Spigot project page: spigotmc.org/resources/advanced-achievements.6239
 * 
 * @since April 2015
 * @version 5.6.5
 * @author Pyves
 */
public class AdvancedAchievements extends JavaPlugin {

	private PluginLoader pluginLoader;
	private AdvancedAchievementsAPI advancedAchievementsAPI;

	@Override
	public void onEnable() {
		long startTime = System.currentTimeMillis();
		// DaggerAdvancedAchievementsComponent is generated by Dagger. Add target/generated-sources/annotations to your
		// build path if the IDE complains here. In any case this will not actually prevent you from compiling.
		AdvancedAchievementsComponent advancedAchievementsComponent = DaggerAdvancedAchievementsComponent.builder()
				.advancedAchievements(this).logger(getLogger()).build();

		pluginLoader = advancedAchievementsComponent.pluginLoader();
		advancedAchievementsAPI = advancedAchievementsComponent.advancedAchievementsBukkitAPI();

		try {
			pluginLoader.loadAdvancedAchievements(true);
		} catch (PluginLoadError e) {
			getLogger().log(Level.SEVERE, "A non recoverable error was encountered while loading the plugin, disabling it:",
					e);
			Bukkit.getServer().getPluginManager().disablePlugin(this);
			return;
		}

		getLogger().info(
				"Plugin has finished loading and is ready to run! Took " + (System.currentTimeMillis() - startTime) + "ms.");
	}

	@Override
	public void onDisable() {
		pluginLoader.disableAdvancedAchievements();
	}

	public AdvancedAchievementsAPI getAdvancedAchievementsAPI() {
		return advancedAchievementsAPI;
	}
}

@Singleton
@Component(modules = { ConfigModule.class, DatabaseModule.class, ServerVersionModule.class, UpdateCheckerModule.class })
interface AdvancedAchievementsComponent {

	PluginLoader pluginLoader();

	AdvancedAchievementsBukkitAPI advancedAchievementsBukkitAPI();

	@Component.Builder
	interface Builder {

		@BindsInstance
		Builder advancedAchievements(AdvancedAchievements advancedAchievements);

		@BindsInstance
		Builder logger(Logger logger);

		AdvancedAchievementsComponent build();
	}
}
